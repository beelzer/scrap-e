name: Renovate Auto-Merge

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]

# Only run for Renovate PRs
jobs:
  # Quick validation before auto-merge
  validate-renovate:
    name: Validate Renovate PR
    if: github.actor == 'renovate[bot]' || github.actor == 'renovate-bot'
    runs-on: ubuntu-latest
    outputs:
      is-patch: ${{ steps.check-version.outputs.is-patch }}
      is-minor: ${{ steps.check-version.outputs.is-minor }}
      should-automerge: ${{ steps.check-version.outputs.should-automerge }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check PR labels and version bump
        id: check-version
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Extract version bump type from PR title
          echo "PR Title: $PR_TITLE"

          # Check if it's a patch update (x.x.X)
          if echo "$PR_TITLE" | grep -qE "to v[0-9]+\.[0-9]+\.[0-9]+$|from [0-9]+\.[0-9]+\.[0-9]+ to [0-9]+\.[0-9]+\.[0-9]+"; then
            OLD_VERSION=$(echo "$PR_TITLE" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" | head -1)
            NEW_VERSION=$(echo "$PR_TITLE" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" | tail -1)

            OLD_MAJOR=$(echo "$OLD_VERSION" | cut -d. -f1)
            OLD_MINOR=$(echo "$OLD_VERSION" | cut -d. -f2)
            OLD_PATCH=$(echo "$OLD_VERSION" | cut -d. -f3)

            NEW_MAJOR=$(echo "$NEW_VERSION" | cut -d. -f1)
            NEW_MINOR=$(echo "$NEW_VERSION" | cut -d. -f2)
            NEW_PATCH=$(echo "$NEW_VERSION" | cut -d. -f3)

            if [[ "$OLD_MAJOR" == "$NEW_MAJOR" && "$OLD_MINOR" == "$NEW_MINOR" ]]; then
              echo "is-patch=true" >> "$GITHUB_OUTPUT"
              echo "is-minor=false" >> "$GITHUB_OUTPUT"
              echo "should-automerge=true" >> "$GITHUB_OUTPUT"
              echo "✅ Patch version update detected"
            elif [[ "$OLD_MAJOR" == "$NEW_MAJOR" ]]; then
              echo "is-patch=false" >> "$GITHUB_OUTPUT"
              echo "is-minor=true" >> "$GITHUB_OUTPUT"
              echo "should-automerge=true" >> "$GITHUB_OUTPUT"
              echo "✅ Minor version update detected"
            else
              echo "is-patch=false" >> "$GITHUB_OUTPUT"
              echo "is-minor=false" >> "$GITHUB_OUTPUT"
              echo "should-automerge=false" >> "$GITHUB_OUTPUT"
              echo "⚠️ Major version update detected - manual review required"
            fi
          else
            echo "is-patch=false" >> "$GITHUB_OUTPUT"
            echo "is-minor=false" >> "$GITHUB_OUTPUT"
            echo "should-automerge=false" >> "$GITHUB_OUTPUT"
            echo "⚠️ Could not determine version bump type"
          fi

      - name: Post comment with auto-merge status
        if: steps.check-version.outputs.should-automerge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const isPatch = ${{ steps.check-version.outputs.is-patch }};
            const isMinor = ${{ steps.check-version.outputs.is-minor }};
            const versionType = isPatch ? 'patch' : 'minor';

            const comment = `🤖 **Renovate Auto-Merge Status**

            This ${versionType} version update will be automatically merged once all CI checks pass.

            - Version bump type: **${versionType}**
            - Auto-merge eligible: ✅
            - Waiting for: CI checks to complete

            If you want to prevent auto-merge, add the \`do-not-merge\` label to this PR.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Enable auto-merge for eligible Renovate PRs
  enable-auto-merge:
    name: Enable Auto-Merge
    needs: validate-renovate
    if: |
      needs.validate-renovate.outputs.should-automerge == 'true' &&
      !contains(github.event.pull_request.labels.*.name, 'do-not-merge') &&
      !contains(github.event.pull_request.labels.*.name, 'security')
    runs-on: ubuntu-latest

    steps:
      - name: Enable auto-merge
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const result = await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                auto_merge: {
                  merge_method: 'squash'
                }
              });

              console.log('Auto-merge enabled:', result.data.auto_merge);
            } catch (error) {
              // Auto-merge might already be enabled or not available
              console.log('Could not enable auto-merge:', error.message);
            }

      - name: Add auto-merge label
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['auto-merge', 'dependencies']
            });

  # Quick security check for dependency updates
  security-check:
    name: Security Validation
    if: github.actor == 'renovate[bot]' || github.actor == 'renovate-bot'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Check for critical vulnerabilities
        id: vuln-check
        run: |
          if grep -q '"level": "error"' trivy-results.sarif; then
            echo "❌ Critical vulnerabilities found"
            echo "has-critical=true" >> "$GITHUB_OUTPUT"
          else
            echo "✅ No critical vulnerabilities"
            echo "has-critical=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Trivy results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Block auto-merge if vulnerabilities found
        if: steps.vuln-check.outputs.has-critical == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['security', 'do-not-merge']
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '🔒 **Security Alert**: Critical vulnerabilities detected. This PR requires manual review and cannot be auto-merged.'
            });
