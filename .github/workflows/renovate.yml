name: üîÑ Renovate

on:
  # Run on push to main to validate config
  push:
    branches:
      - main
    paths:
      - 'renovate.json'
      - '.github/workflows/renovate.yml'

  # Run on PRs from Renovate
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - auto_merge_enabled

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      rebase:
        description: 'Rebase all Renovate PRs'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-config:
    name: ‚úÖ Validate Renovate Config
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v5

      - name: üîç Validate renovate.json
        uses: suzuki-shunsuke/github-action-renovate-config-validator@v1.1.1
        with:
          config_file_path: 'renovate.json'

      - name: ‚úÖ Config validation passed
        if: success()
        run: echo "‚úÖ Renovate configuration is valid"

  auto-merge:
    name: ü§ñ Auto-merge Renovate PRs
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      (github.actor == 'renovate[bot]' || github.actor == 'renovate-bot')
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v5

      - name: üîç Get PR info
        id: pr-info
        run: |
          PR_DATA=$(gh pr view "${{ github.event.pull_request.number }}" --json labels,title,body)
          echo "pr_data=$PR_DATA" >> "$GITHUB_OUTPUT"

          # Extract update type from PR title or labels
          LABELS=$(echo "$PR_DATA" | jq -r '.labels[].name' | tr '\n' ' ')
          TITLE=$(echo "$PR_DATA" | jq -r '.title')

          echo "labels=$LABELS" >> "$GITHUB_OUTPUT"
          echo "title=$TITLE" >> "$GITHUB_OUTPUT"

          # Determine if we should auto-merge
          if echo "$LABELS" | grep -E "(automerge|patch|minor)" > /dev/null; then
            echo "should_merge=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_merge=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚úÖ Auto-approve PR
        if: steps.pr-info.outputs.should_merge == 'true'
        run: |
          gh pr review ${{ github.event.pull_request.number }} \
            --approve \
            --body "Auto-approved by Renovate workflow ü§ñ"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üîÄ Enable auto-merge
        if: steps.pr-info.outputs.should_merge == 'true'
        run: |
          gh pr merge ${{ github.event.pull_request.number }} \
            --auto \
            --squash \
            --delete-branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù Add comment
        if: steps.pr-info.outputs.should_merge == 'true'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "ü§ñ This PR has been approved and will be automatically merged once all checks pass."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  rebase-prs:
    name: üîÑ Rebase Renovate PRs
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rebase == 'true'
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v5

      - name: üîÑ Rebase all Renovate PRs
        run: |
          # Get all open PRs from Renovate
          RENOVATE_PRS=$(gh pr list --author "renovate[bot]" --state open --json number --jq '.[].number')

          if [ -z "$RENOVATE_PRS" ]; then
            echo "No open Renovate PRs found"
            exit 0
          fi

          echo "Found Renovate PRs: $RENOVATE_PRS"

          for PR in $RENOVATE_PRS; do
            echo "Rebasing PR #$PR..."
            gh pr comment "$PR" --body "@renovate rebase"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
