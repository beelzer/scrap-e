name: CI

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug logging'
        required: false
        default: false

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.13'
  UV_CACHE_DIR: ~/.cache/uv
  # Enable colored output
  FORCE_COLOR: 1

jobs:
  # Quick lint check that runs first
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for better git operations

      - name: Setup Python with uv
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        uses: ./.github/actions/install-deps
        with:
          extras: 'dev'
          install-playwright: false  # Not needed for linting

      - name: Run linting checks
        uses: ./.github/actions/lint
        with:
          run-ruff: true
          run-mypy: true

  # Test job that runs after lint passes
  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python with uv
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        uses: ./.github/actions/install-deps
        with:
          extras: 'dev'
          install-playwright: true

      - name: Run test suite
        uses: ./.github/actions/run-tests
        with:
          upload-coverage: true

      - name: Upload coverage to Codecov
        if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

  # Security scan (optional, runs in parallel with tests)
  security:
    name: Security Scan
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true  # Don't fail the build on security issues initially

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python with uv
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        uses: ./.github/actions/install-deps
        with:
          extras: 'dev'
          install-playwright: false

      - name: Run bandit security scan
        run: |
          echo "Running bandit security scan..."
          uv run bandit -r src/ -f json -o bandit-report.json || true
          uv run bandit -r src/ -f screen || true
        continue-on-error: true

      - name: Run safety check
        run: |
          echo "Checking for known vulnerabilities..."
          uv run safety check --json --continue-on-error || true
        continue-on-error: true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
          retention-days: 30

  # Final status check
  ci-status:
    name: CI Status
    needs: [lint, test, security]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" ]]; then
            echo "CI checks failed!"
            exit 1
          fi
          echo "All required CI checks passed!"

      - name: Create status summary
        run: |
          {
            echo "## CI Run Summary"
            echo ""
            echo "| Job | Status |"
            echo "|-----|--------|"
            echo "| Lint | ${{ needs.lint.result }} |"
            echo "| Test | ${{ needs.test.result }} |"
            echo "| Security | ${{ needs.security.result }} |"
            echo ""
            echo "**Overall Status:** ${{ job.status }}"
          } >> "$GITHUB_STEP_SUMMARY"
