name: Test Matrix

on:
  # Run on schedule for comprehensive testing
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      python-versions:
        description: 'Python versions to test (comma-separated, e.g., "3.12,3.13")'
        required: false
        default: '3.13'
      os-matrix:
        description: 'Operating systems to test (comma-separated, e.g., "ubuntu-latest,windows-latest,macos-latest")'
        required: false
        default: 'ubuntu-latest'

jobs:
  define-matrix:
    name: Define Test Matrix
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.set-matrix.outputs.python-versions }}
      os-list: ${{ steps.set-matrix.outputs.os-list }}

    steps:
      - name: Set up matrix
        id: set-matrix
        run: |
          # Default values for scheduled runs
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "python-versions=[\"3.13\"]" >> "$GITHUB_OUTPUT"
            echo "os-list=[\"ubuntu-latest\", \"windows-latest\", \"macos-latest\"]" >> "$GITHUB_OUTPUT"
          else
            # Parse manual inputs
            PYTHON_VERSIONS="${{ github.event.inputs.python-versions || '3.13' }}"
            OS_MATRIX="${{ github.event.inputs.os-matrix || 'ubuntu-latest' }}"

            # Convert comma-separated to JSON array
            PYTHON_JSON=$(echo "$PYTHON_VERSIONS" | sed 's/,/", "/g' | sed 's/^/["/' | sed 's/$/"]/')
            OS_JSON=$(echo "$OS_MATRIX" | sed 's/,/", "/g' | sed 's/^/["/' | sed 's/$/"]/')

            echo "python-versions=$PYTHON_JSON" >> "$GITHUB_OUTPUT"
            echo "os-list=$OS_JSON" >> "$GITHUB_OUTPUT"
          fi

  test-matrix:
    name: Test - ${{ matrix.os }} / Python ${{ matrix.python-version }}
    needs: define-matrix
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.define-matrix.outputs.os-list) }}
        python-version: ${{ fromJSON(needs.define-matrix.outputs.python-versions) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python with uv
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        uses: ./.github/actions/install-deps
        with:
          extras: 'dev'
          install-playwright: true

      - name: Run linting
        uses: ./.github/actions/lint
        with:
          run-ruff: true
          run-mypy: ${{ matrix.python-version == '3.13' }}  # Only run mypy on latest Python

      - name: Run tests
        uses: ./.github/actions/run-tests
        with:
          upload-coverage: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13' }}

  matrix-status:
    name: Matrix Test Status
    needs: test-matrix
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Check matrix status
        run: |
          if [[ "${{ needs.test-matrix.result }}" == "failure" ]]; then
            echo "Matrix tests failed!"
            exit 1
          fi
          echo "All matrix tests passed!"

      - name: Create summary
        run: |
          {
            echo "## Test Matrix Summary"
            echo ""
            echo "**Status:** ${{ needs.test-matrix.result }}"
            echo ""
            echo "Matrix testing completed across multiple Python versions and operating systems."
          } >> "$GITHUB_STEP_SUMMARY"
