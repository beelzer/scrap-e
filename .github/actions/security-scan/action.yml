name: 'Security Scanning'
description: 'Runs security scans with Bandit, Safety, and pip-audit'
inputs:
  bandit-severity:
    description: 'Bandit severity level'
    required: false
    default: 'medium'
  upload-sarif:
    description: 'Upload SARIF results to GitHub'
    required: false
    default: 'true'

outputs:
  vulnerabilities-found:
    description: 'Whether vulnerabilities were found'
    value: ${{ steps.summary.outputs.vulnerabilities }}

runs:
  using: 'composite'
  steps:
    - name: Install security tools
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Installing security scanning tools"
        uv pip install \
          bandit[toml] \
          safety \
          pip-audit \
          vulture
        echo "::endgroup::"

    - name: Run Bandit security scanner
      id: bandit
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Running Bandit security scanner"
        # Generate SARIF report for GitHub Security tab
        bandit -r src/ \
          --severity-level ${{ inputs.bandit-severity }} \
          --confidence-level medium \
          --format sarif \
          --output bandit-results.sarif \
          --exit-zero

        # Generate text report and capture status
        if bandit -r src/ \
          --severity-level ${{ inputs.bandit-severity }} \
          --confidence-level medium \
          --format txt; then
          echo "::notice::Bandit found no security issues"
        else
          echo "bandit_status=$?" >> "$GITHUB_ENV"
          echo "::warning::Bandit found potential security issues"
        fi
        echo "::endgroup::"
      continue-on-error: true

    - name: Run Safety vulnerability check
      id: safety
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Running Safety vulnerability check"
        uv pip freeze > requirements-frozen.txt
        if safety check --file requirements-frozen.txt --output text; then
          echo "::notice::Safety found no known vulnerabilities"
        else
          echo "safety_status=$?" >> "$GITHUB_ENV"
          echo "::warning::Safety found known vulnerabilities in dependencies"
        fi
        rm -f requirements-frozen.txt
        echo "::endgroup::"
      continue-on-error: true

    - name: Run pip-audit
      id: pip-audit
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Running pip-audit vulnerability check"
        if pip-audit --desc --format markdown; then
          echo "::notice::pip-audit found no vulnerabilities"
        else
          echo "pip_audit_status=$?" >> "$GITHUB_ENV"
          echo "::warning::pip-audit found vulnerabilities"
        fi
        echo "::endgroup::"
      continue-on-error: true

    - name: Upload SARIF results
      if: inputs.upload-sarif == 'true' && always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-results.sarif
        category: bandit
      continue-on-error: true

    - name: Generate security summary
      id: summary
      if: always()
      shell: bash
      run: |
        set -euo pipefail
        vulnerabilities="false"
        if [ -n "${bandit_status:-}" ] || [ -n "${safety_status:-}" ] || [ -n "${pip_audit_status:-}" ]; then
          vulnerabilities="true"
        fi
        echo "vulnerabilities=$vulnerabilities" >> "$GITHUB_OUTPUT"

        {
          echo "## Security Scan Report"
          echo ""
          echo "| Scanner | Status |"
          echo "|---------|--------|"
          echo "| Bandit | ${bandit_status:+⚠️ Issues Found}${bandit_status:-✅ Passed} |"
          echo "| Safety | ${safety_status:+⚠️ Vulnerabilities Found}${safety_status:-✅ Passed} |"
          echo "| pip-audit | ${pip_audit_status:+⚠️ Issues Found}${pip_audit_status:-✅ Passed} |"
          echo ""
          echo "### Scan Configuration"
          echo "- **Bandit Severity Level:** ${{ inputs.bandit-severity }}"
          echo "- **SARIF Upload:** ${{ inputs.upload-sarif }}"
        } >> "$GITHUB_STEP_SUMMARY"
