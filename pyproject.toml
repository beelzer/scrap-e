[project]
name = "scrap-e"
version = "0.1.0"
description = "Universal data scraper - Web, APIs, databases, files"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "MIT" }
authors = [
    { name = "Scrap-E Team" }
]
keywords = ["scraper", "web-scraping", "data-extraction", "api", "database"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
]

dependencies = [
    # Core
    "pydantic==2.11.7",
    "pydantic-settings==2.10.1",
    "structlog==25.4.0",
    "python-dotenv==1.1.1",
    "typing-extensions==4.14.1",

    # Web Scraping
    "httpx==0.28.1",
    "beautifulsoup4==4.13.4",
    "lxml==6.0.0",
    "playwright==1.54.0",
    "selectolax==0.3.33",

    # API Clients
    "aiohttp==3.12.15",
    "websockets==15.0.1",
    "gql==3.5.0",

    # Database
    "sqlalchemy==2.0.43",
    "pymongo==4.14.1",
    "redis==6.4.0",
    "asyncpg==0.30.0",

    # File Processing
    "pandas==2.3.1",
    "openpyxl==3.1.5",
    "pypdf==6.0.0",
    "python-docx==1.1.2",
    "pyyaml==6.0.2",

    # Utilities
    "tenacity==9.1.2",
    "diskcache==5.6.3",
    "click==8.2.1",
    "rich==14.1.0",
    "python-dateutil==2.9.0.post0",
    "validators==0.35.0",

    # Async support
    "anyio==4.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest==8.4.1",
    "pytest-asyncio==1.1.0",
    "pytest-cov==6.2.1",
    "pytest-mock==3.14.1",
    "pytest-xdist==3.6.1",
    "ruff==0.9.2",
    "mypy==1.14.1",
    "types-beautifulsoup4",
    "types-python-dateutil",
    "types-pyyaml",
    "types-redis",
    "lxml-stubs",
    "black==25.1.0",
    "isort==5.13.2",
    "pre-commit==4.1.0",
    "ipython==8.34.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.28.0",
]

[project.scripts]
scrap-e = "scrap_e.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/scrap_e"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=scrap_e",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore::DeprecationWarning:pydantic.*",
    "ignore:Module scrap_e was previously imported",
]

[tool.coverage.run]
source = ["src/scrap_e"]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
precision = 2
show_missing = true

[tool.mypy]
python_version = "3.13"
plugins = ["pydantic.mypy"]
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
explicit_package_bases = true
mypy_path = "src"
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
namespace_packages = true
pretty = true
show_error_codes = true
show_error_context = true

# Ignore missing imports for packages without type stubs
[[tool.mypy.overrides]]
module = ["selectolax.*", "lxml.*"]
ignore_missing_imports = true

[tool.ruff]
target-version = "py313"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "RUF",  # Ruff-specific rules
    "PTH",  # flake8-use-pathlib
    "ERA",  # flake8-eradicate
    "PL",   # Pylint
    "TCH",  # flake8-type-checking
    "FLY",  # flynt
    "PERF", # Perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RET",  # flake8-return
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "PLR0913", # too many arguments
    "PLR2004", # magic constants
    "PLR0912", # too many branches
    "PLR0911", # too many return statements
    "PERF401", # use list comprehension (false positive for async)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG", "PLR2004"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_with_arguments tests

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*.py"]

[dependency-groups]
dev = [
    "isort>=5.13.2",
    "lxml-stubs>=0.5.1",
    "pandas-stubs>=2.3.0.250703",
    "pre-commit>=4.1.0",
    "types-lxml>=2025.3.30",
]
